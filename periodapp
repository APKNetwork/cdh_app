# Simple period tracker
# Copyright 2024, eTux, https://codeberg.org/etux/myPeriod

import flet as ft
import datetime
import json
import uuid
import re

version = 'V. 1.0'

period_list = []
time_format = '%H:%M %m/%d/%Y'

try:
    f = open('data.json', 'r', encoding='utf-8')
    period_list = json.loads(f.read())
except:
    with open('data.json', 'w', encoding='utf-8') as f:
        json.dump([], f, ensure_ascii=False, indent=4)
    

##print(period_list)

def main(page: ft.Page):
    page.title = 'myPeriod'
    date = None

    def delete_period(e):
        for p in period_list:
            if p['uuid'] == e.control.data:
                del_p = p
                for row in period_table.rows:
                    if row.data == e.control.data:
                        del_row = row
                        period_table.rows.remove(del_row)
                period_list.remove(del_p)
        page.update()
        with open('data.json', 'w', encoding='utf-8') as f:
                json.dump(period_list, f, ensure_ascii=False, indent=4)
        
    footer = ft.Column(controls=[ft.Row(controls=[
        ft.Text(
                spans=[
                    ft.TextSpan('Â© 2024, eTux - '),
##                                    ft.TextSpan(" All rights reserved. "),
                    ft.TextSpan(
                        "Git",
                        ft.TextStyle(decoration=ft.TextDecoration.UNDERLINE),
                        url="https://codeberg.org/etux/myPeriod",
                    ),
                ],
            ),
        ], alignment = ft.MainAxisAlignment.CENTER),
        ft.Row(controls=[ft.Text(version, weight=ft.FontWeight.BOLD,)], alignment = ft.MainAxisAlignment.CENTER),
                         ]
                       )

    def change_date(e):
        nonlocal date
        date = date_picker.value.strftime(time_format)

    def date_picker_dismissed(e):
        nonlocal date
        date = date_picker.value.strftime(time_format)

    date_picker = ft.DatePicker(
        on_change=change_date,
        on_dismiss=date_picker_dismissed,
##        first_date=datetime.datetime(2023, 10, 1),
##        last_date=datetime.datetime(2024, 10, 1),
    )
    page.overlay.append(date_picker)

    date_button = ft.ElevatedButton(
        "Set Date",
        icon=ft.icons.CALENDAR_MONTH,
        on_click=lambda _: date_picker.pick_date(),
    )
    
    appbar = ft.AppBar(
            leading=ft.Icon(ft.icons.WATER_DROP),
            leading_width=40,
            title=ft.Text("myPeriod"),
            center_title=False,
            bgcolor=ft.colors.SURFACE_VARIANT,
            actions=[
##                ft.IconButton(ft.icons.WB_SUNNY_OUTLINED),
##                ft.IconButton(ft.icons.FILTER_3),
                ft.PopupMenuButton(
                    items=[
                        ft.PopupMenuItem(text="Help", on_click=lambda _: page.go("/page/Help")),
                        ft.PopupMenuItem(text="About", on_click=lambda _: page.go("/page/About")),
                        ft.PopupMenuItem(),
                        ft.PopupMenuItem(text="License", on_click=lambda _: page.go("/page/License")),
##                        ft.PopupMenuItem(),  # divider

                    ]
                ),
            ],
        )
    
    period_table = ft.DataTable(
            columns=[
                ft.DataColumn(ft.Text("Status")),
                ft.DataColumn(ft.Text("Type")),
                ft.DataColumn(ft.Text("Notes")),
            ],
            data_row_min_height = 60,
            data_row_max_height = 60
            )
    for p in period_list:
        color=ft.colors.YELLOW
        if p['status'] == 'Start':
            color=ft.colors.RED
        if p['status'] == 'End':
            color=ft.colors.GREEN
        period_table.rows.append(
                ft.DataRow(
                    cells=[
                        ft.DataCell(ft.Text(p['status'] + '\n' + p['date'])),
                        ft.DataCell(ft.Text(p['type'])),
                        ft.DataCell(ft.Column(controls=[
                                ft.Container(
                                content=ft.Text(p['notes']),
                                width=100)],
                                          scroll = ft.ScrollMode.ALWAYS)
                        ),
                    ],
                    color=color,
                    on_long_press=delete_period,
                    data=p['uuid'],
                )
            )
    notes = ft.TextField(label="Notes", col=6)
    period_status = period_type = ft.Dropdown(
        label='Status',
        options=[
            ft.dropdown.Option("Start"),
            ft.dropdown.Option("Update"),
            ft.dropdown.Option("End"),
            ft.dropdown.Option("Non Period Spotting"),
            ft.dropdown.Option("Other"),
            ft.dropdown.Option("Birth"),
        ], col = 3
    )
    period_type = ft.Dropdown(
        label='Type',
        options=[
            ft.dropdown.Option("Light"),
            ft.dropdown.Option("Medium"),
            ft.dropdown.Option("Heavy"),
            ft.dropdown.Option("Clot"),
            ft.dropdown.Option("Other"),
            ft.dropdown.Option("Baby"),
        ], col = 3
    )

    
    def save_period(e):
        nonlocal notes, period_type, date
        if period_type.value != None or period_status.value != None or period_type.value != '' or period_status.value != '':
            if period_type.value == None:
                period_type.value = ''
            if period_status.value == None:
                period_status.value = ''
            save_date = datetime.datetime.now().strftime(time_format)
            if date != None:
                save_date = date_picker.value.strftime(time_format)
                
            uuid_record = str(uuid.uuid4())
            period_list.insert(0, {'status': period_status.value,'type': period_type.value, 'notes': notes.value, 'date': save_date, 'uuid': uuid_record})
            color=ft.colors.YELLOW
            if period_status.value == 'Start':
                color=ft.colors.RED
            if period_status.value == 'End':
                color=ft.colors.GREEN
            period_table.rows.insert(0,
                ft.DataRow(
                        cells=[
                            ft.DataCell(ft.Text(period_status.value + '\n' + str(save_date))),
                            ft.DataCell(ft.Text(period_type.value)),
                            ft.DataCell(
                                ft.Column(controls=[
                                ft.Container(
                                content=ft.Text(notes.value),
                                width=100)],
                                          scroll = ft.ScrollMode.ALWAYS)
                                ),
                        ],
                        color=color,
                        on_long_press=delete_period,
                        data=uuid_record,
                    )
                )
            period_type.value = ''
            period_status.value = ''
            notes.value = ''
            date_picker.value = None
            date = None
            with open('data.json', 'w', encoding='utf-8') as f:
                json.dump(period_list, f, ensure_ascii=False, indent=4)
            page.update()

    input_form = ft.ResponsiveRow(controls=[

        ft.Column(col={"xs": 12, "sm": 6, "lg": 3}, controls=[period_status]),
        ft.Column(col={"xs": 12, "sm": 6, "lg": 3}, controls=[period_type]),
        ft.Column(col={"xs": 12, "sm": 6, "lg": 3}, controls=[notes]),
        ft.Column(col={"xs": 12, "sm": 6, "lg": 3}, horizontal_alignment = ft.CrossAxisAlignment.CENTER, controls=[date_button, ft.ElevatedButton(text="Save", icon="save", on_click=save_period)])

        ])

    def route_change(route):
        troute = ft.TemplateRoute(page.route)

        page.views.clear()
        page.views.append(
            ft.View(
                "/",
                [
                    appbar,
                    input_form,
                    ft.Divider(height=10, thickness=5, color="pink"),
                    ft.ResponsiveRow([period_table]),
                    ft.Divider(height=10, thickness=5, color="pink"),
                    footer
                ]
        )
            )
        page.views[0].scroll = ft.ScrollMode.ALWAYS

        if troute.match("/page/:page_name"):
            
            page_file = open('pages/' + troute.page_name + '.md', 'r', encoding='utf-8')
            md_file = page_file.read()
            page.views.append(
                ft.View(
                    "/page",
                    [
                        ft.AppBar(title=ft.Text(re.sub('_', ' ', troute.page_name)), bgcolor=ft.colors.SURFACE_VARIANT),
                        ft.Markdown(
                            md_file,
                            selectable=True,
                            extension_set=ft.MarkdownExtensionSet.GITHUB_WEB,
                            on_tap_link=lambda e: page.launch_url(e.data),
                        ),
                        ft.Divider(height=10, thickness=5, color="pink"),
                        footer
                    ],
                )
            )
            page.views[1].scroll = ft.ScrollMode.ALWAYS
        page.update()

    def view_pop(view):
        page.views.pop()
        top_view = page.views[-1]
        page.go(top_view.route)

    page.on_route_change = route_change
    page.on_view_pop = view_pop
    page.go(page.route)

    
##    page.add(input_form)
##    page.add(ft.Divider(height=10, thickness=5, color="pink"))
##    page.add(ft.ResponsiveRow([period_table]))
##    page.add(ft.Divider(height=10, thickness=5))
##    page.add(ft.Row(controls=[ft.Text('Copyright 2024 - Your Husband - v1.0', weight=ft.FontWeight.BOLD,)], alignment = ft.MainAxisAlignment.CENTER))
##    page.scroll = ft.ScrollMode.ALWAYS

ft.app(main, assets_dir="assets", name='myPeriod')
